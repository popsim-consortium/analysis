
"""
Snakefile for running N_t analysis on stdpopsim.

Simply running `snakemake` will run all analysis 
defined by the arguments above.

Currently, for each rep,
This will run stairway plot, smc++, and msmc
on the data resulting from simulations
on all chromosomes included in chrm_list
for estimates of N_t (Ne through time).
"""

import pathlib
import sys

import numpy as np
import stdpopsim

import stairway
import smc
import msmc
import simulations
import plots


# ###############################################################################
# KNOBS - 
# ###############################################################################


# A seed to replicate results
# TODO This heuristic may need a changed?
# TODO Generation time
# TODO mutation rates
# TODO add assertions for helpful error messages?

seed = 12345
np.random.seed(seed)

# TODO This should end up being a list 
# so that we may sample from multiple populations.
# doing this may be a little tricky for msmc sub-sampling?
population_id = 0

# This is the number of samples to simulate for each analysis
num_sampled_genomes_per_replicate = 20

# Here is a list of sample sizes to run msmc on. 
# Each element counts as its own analysis
# so there will be "replicates" runs for each size
num_sampled_genomes_msmc = [8,4,2]

# The number of msmc Baumwelch(?) iterations to run,
# typically 20
num_msmc_iterations = 20

# The number of replicates of each analysis you would like to run
replicates = 2

# Where you would like all output files from analysis to live
output_dir = "homo_sapiens_Gutenkunst2"

# The analysis species
species = stdpopsim.homo_sapiens

# The specific model you would like to run
model = species.GutenkunstThreePopOutOfAfrica()

# The genetic map you would like to use.
genetic_map = species.HapmapII_GRCh37()

# A list containing the names all simulated chromosomes you would 
# like to include in each analysis
# TODO: Change this to list(species.genome.chromosomes)
chrm_list = [chrom for chrom in species.genome.chromosomes]
    

# ###############################################################################
# GENERAL RULES & GLOBALS
# ###############################################################################


seed_array = np.random.random_integers(1,2**31,replicates)
genetic_map_downloaded_flag= ".genetic_map_downloaded"
msmc_exec = "../extern/msmc/build/msmc"
stairwayplot_code = "stairwayplot/swarmops.jar"


rule all:
   input: output_dir + "/all_estimated_Ne.pdf"

rule download_genetic_map:
    output: genetic_map_downloaded_flag
    message: "Downloading default genetic map"
    run:
        # We need to have this here to avoid several threads trying to download the 
        # the genetic map into the cache at the same time.
        #genetic_map = stdpopsim.homo_sapiens.HapmapII_GRCh37()
        if not genetic_map.is_cached():
            genetic_map.download()
        with open(output[0], "w") as f:
            print("File to indicate genetic map has been downloaded", file=f)


rule simulation:
    input: 
        genetic_map_downloaded_flag,
        # rules.top_directory.output,
    output:
        output_dir + "/{seeds}/{chrms}.trees"
    # TODO get simulation parameters from stdpopsim, so we can share them easily 
    # with anlysis code below?
    run: 
        simulations.simulate(
            out_path = output[0], species = species, model = model,
            genetic_map = genetic_map, seed = wildcards.seeds, 
            chrmStr = wildcards.chrms, sample_size = num_sampled_genomes_per_replicate,
            population = population_id)


# ###############################################################################
# STAIRWAYPLOT
# ###############################################################################


rule sp_download:
    output: 
        stairwayplot_code
    message: 
        "downloading stairwayplot"
    shell:
        "wget http://sesame.uoregon.edu/~adkern/stdpopsim/stairwayplot.tar.gz && \
            tar zxf stairwayplot.tar.gz"


rule run_stairwayplot:
    input:
        expand(output_dir + "/{seeds}/{chrms}.trees",
            chrms=chrm_list, seeds=seed_array),
        stairwayplot_code,
    output: output_dir + "/{seeds}/stairwayplot_estimated_Ne.txt"
    threads: 20
    run: 
        inputs = expand(output_dir + "/{seeds}/{chrms}.trees",
            seeds=wildcards.seeds, chrms=chrm_list)
        runner = stairway.StairwayPlotRunner(
            workdir= output_dir + "/stairwayplot/" + wildcards.seeds+"/",
            stairway_dir=pathlib.Path.cwd() / "stairwayplot")
        runner.ts_to_stairway(inputs, num_bootstraps=12)
        runner.run_theta_estimation(max_workers=threads, show_progress=True)
        # TODO get the rate here from stdpopsim. 
        runner.run_summary(output, mutation_rate=1e-8, generation_time=10)


def ne_files(wildcards):
    return expand(output_dir + "/{seeds}/stairwayplot_estimated_Ne.txt",
            seeds=seed_array, chrms=chrm_list)


rule compound_stairwayplot:
    input:
        ne_files
    output:
        output_dir + "/stairwayplot_estimated_Ne.png"
    run: plots.plot_compound_Ne_estimate(model, input, output[0])


# ###############################################################################
# SMC++
# ###############################################################################


rule ts_to_smc:
    input:rules.simulation.output
    output: output_dir + "/{seeds}/{chrms}.trees.smc.gz"
    run: smc.write_smcpp_file(input[0])


rule run_smcpp:
    input:
        expand(output_dir+ "/{seeds}/{chrms}.trees.smc.gz", 
            chrms=chrm_list, seeds=seed_array)
    output:
        output_dir + "/{seeds}/trees.smc.gz.final.json"
    threads: 8
    run:
	    # need to cd into subdir because smc++ crashes otherwise
        cur = os.getcwd()
        os.chdir(f"{output_dir}/{wildcards.seeds}")
        inputs = expand("{chrms}.trees.smc.gz", chrms=chrm_list)
        inputs = " ".join(inputs)
        base = f"trees.smc.gz"
        # TODO get the rate here from stdpopsim
        smc.run_smcpp_estimate(inputs, base, mutation_rate=1e-8, ncores=threads)
	    # need to cd out of subdir for snakemake sanity
        os.chdir(cur)


rule smcpp_plot:
    input: 
        rules.run_smcpp.output
    output: 
        output_dir + "/{seeds}/trees.smc.gz.final.json.csv"
    run:
        # TODO get the genetion time from std source
        smc.run_smcpp_plot(input[0], generation_time=10)


def ne_files_smcpp(wildcards):
    return expand(output_dir + "/{seeds}/trees.smc.gz.final.json.csv",
            seeds=seed_array, chrms=chrm_list)


rule compound_smcpp:
    input: ne_files_smcpp
    output: output_dir + "/smcpp_estimated_Ne.png"
    run: plots.plot_compound_smcpp(model, input, output[0])


# ###############################################################################
# MSMC
# ###############################################################################


rule ts_to_multihep:
    input: rules.simulation.output
    output: output_dir + "/{seeds}/{samps}.{chrms}.trees.multihep.txt"
    run: msmc.write_msmc_file(input[0], num_sampled_genomes_msmc)


rule run_msmc:
    input:
        # TODO make this NOT dependent on all simulations.
        # is there anyway to get access to wildcards.seeds from here? 
        expand(output_dir + "/{seeds}/{samps}.{chrms}.trees.multihep.txt",
            chrms=chrm_list, seeds=seed_array, samps=num_sampled_genomes_msmc)
    output: output_dir + "/{seeds}/{samps}.trees.multihep.txt.final.txt"
    threads: 40
    run: 
        inputs = expand(output_dir + "/{seeds}/{samps}.{chrms}.trees.multihep.txt",
            seeds=wildcards.seeds, samps=wildcards.samps, chrms=chrm_list)
        input_file_string = " ".join(inputs)
        output_file_string = output_dir + f"/{wildcards.seeds}/{wildcards.samps}.trees.multihep.txt"
        msmc.run_msmc_estimate(input_file_string, output_file_string, msmc_exec,
            iterations=num_msmc_iterations, ncores=threads)


rule convert_msmc:
    input: rules.run_msmc.output
    output: output_dir + "/{seeds}/{samps}.trees.multihep.txt.final.txt.csv"
    run: msmc.convert_msmc_output(input[0], mutation_rate=1e-8, generation_time = 10)


def ne_files_msmc(wildcards):
    return expand(output_dir + "/{seeds}/{samps}.trees.multihep.txt.final.txt.csv",
            seeds=seed_array,samps=num_sampled_genomes_msmc)


rule compound_msmc:
    input: ne_files_msmc,
    output: output_dir+"/msmc_estimated_Ne.png"
    run: plots.plot_compound_msmc(model, input, output[0])


# ###############################################################################
# 
# ###############################################################################


rule all_plot:
    input:
        f1 = ne_files,
        f2 = ne_files_smcpp,
        f3 = ne_files_msmc,
    output:
        output_dir + "/all_estimated_Ne.pdf"
    run: 
        plots.plot_all_ne_estimates(model, population_id, 
            input.f1, input.f2, input.f3, output[0])


rule clean:
    shell:
        "rm -rf stairwayplot \
            stairwayplot.tar.gz \
            "+output_dir+" \
            .genetic_map_downloaded \
            .snakemake"
