
"""
Snakefile for running N_t analysis on stdpopsim.

Simply running `snakemake` will run all analysis 
defined by the arguments above.

Currently, for each rep,
This will run stairway plot, smc++, and msmc
on the data resulting from simulations
on all chromosomes included in chrm_list
for estimates of N_t (Ne through time).
"""

import pathlib
import sys
import os

import numpy as np
import stdpopsim

import stairway
import smc
import msmc
import simulations
import plots
import smcsmc
import smcsmc.popsim


# ###############################################################################
# KNOBS - 
# ###############################################################################

# A seed to replicate results
# TODO mutation rates

configfile: config["config"]+"/config.json"

np.random.seed(config["seed"])

# TODO This should end up being a list 
# so that we may sample from multiple populations.
# doing this may be a little tricky for msmc sub-sampling?
population_id = config["population_id"]

# This is the number of samples to simulate for each analysis
num_sampled_genomes_per_replicate = config["num_sampled_genomes_per_replicate"]

# Here is a list of sample sizes to run msmc on. 
# Each element counts as its own analysis
# so there will be "replicates" runs for each size
#
# and a similar setup for SMCSMC
num_sampled_genomes_msmc = [int(x) for x in config["num_sampled_genomes_msmc"].split(",")]
num_sampled_genomes_smcsmc = [int(x) for x in config["num_sampled_genomes_smcsmc"].split(",")]

# The number of msmc Baumwelch(?) iterations to run,
# typically 20
#
# And again, similar for SMCSMC. Number of stochastic EM iterations.
# 15 is typical, but more is good too. Assess for convergence based on 
# rainbow plots.
num_msmc_iterations = config["num_msmc_iterations"]
num_smcsmc_iterations = config["num_smcsmc_iterations"]

# Number of particles to use for SMCSMC
# 
# A good starting point is 50k, and see if reducing 
# significantly impacts the estimates that you are
# recieveing. 
num_smcsmc_particles = config["num_smcsmc_particles"]

# The number of replicates of each analysis you would like to run
replicates = config["replicates"]

# Where you would like all output files from analysis to live
output_dir = os.path.abspath(config["config"])

# The analysis species
species = getattr(stdpopsim,config["species"])

# The specific model you would like to run
model_class = getattr(species,config["model"])
model = model_class()

# The genetic map you would like to use.
genetic_map_class = getattr(species,config["genetic_map"])
genetic_map = genetic_map_class()

# The names of all chromosomes to simulate, separated by commas
# Use "all" to simulate all chromsomes for the genome
chrm_list = [chrom for chrom in species.genome.chromosomes]
chrm_list.remove("chrY")
if(config["chrm_list"] != "all"):
    chrm_list = [chr for chr in config["chrm_list"].split(",")]

# For plotting
generation_time = model.generation_time

# This grabs the default mr from the first chromosome,
# Ultimitely This needs to be replaced with the weighted average
# of all chromosomes: This should be done in stdpopsim. 
mutation_rate = species.genome.mean_mutation_rate


# ###############################################################################
# GENERAL RULES & GLOBALS
# ###############################################################################


seed_array = np.random.random_integers(1,2**31,replicates)
genetic_map_downloaded_flag= ".genetic_map_downloaded"
msmc_exec = "../extern/msmc/build/msmc"
stairwayplot_code = "stairwayplot/swarmops.jar"

try:
    mask_file = config["mask_file"]
except KeyError:
    mask_file = None

# Run full pipeline!
#rule all:
#    input: output_dir + "/Results/all_estimated_Ne.pdf"

## Run only the simulations!
#rule all:
#    input: expand(output_dir + "/Intermediate/{seeds}/{chrms}.trees", seeds=seed_array, chrms=chrm_list) 

## Run only stairwayplot and plot with coalescent rate!
rule all:
   input: output_dir + "/Results/stairwayplot.pdf"

rule download_genetic_map:
    output: genetic_map_downloaded_flag
    message: "Downloading default genetic map"
    run:
        # We need to have this here to avoid several threads trying to download the 
        # the genetic map into the cache at the same time.
        #genetic_map = stdpopsim.homo_sapiens.HapmapII_GRCh37()
        if not genetic_map.is_cached():
            genetic_map.download()
        with open(output[0], "w") as f:
            print("File to indicate genetic map has been downloaded", file=f)


rule simulation:
    input: 
        genetic_map_downloaded_flag,
        # rules.top_directory.output,
    output:
        output_dir + "/Intermediate/{seeds}/{chrms}.trees"
    # TODO get simulation parameters from stdpopsim, so we can share them easily 
    # with anlysis code below?
    threads: 1 
    run:
        simulations.simulate(
            out_path = output[0], species = species, model = model,
            genetic_map = genetic_map, seed = wildcards.seeds, 
            chrmStr = wildcards.chrms, sample_size = num_sampled_genomes_per_replicate,
            population = population_id)


# ###############################################################################
# STAIRWAYPLOT
# ###############################################################################


rule sp_download:
    output: 
        stairwayplot_code
    message: 
        "downloading stairwayplot"
    shell:
        "wget http://sesame.uoregon.edu/~adkern/stdpopsim/stairwayplot.tar.gz && \
            tar zxf stairwayplot.tar.gz"


rule run_stairwayplot:
    input:
        expand(output_dir + "/Intermediate/{seeds}/{chrms}.trees",
            chrms=chrm_list, seeds=seed_array),
        stairwayplot_code,
    output: output_dir + "/Results/{seeds}/stairwayplot_estimated_Ne.txt"
    threads: 20
    run:
        inputs = expand(output_dir + "/Intermediate/{seeds}/{chrms}.trees",
            seeds=wildcards.seeds, chrms=chrm_list)
        runner = stairway.StairwayPlotRunner(
            workdir= output_dir + "/stairwayplot/" + wildcards.seeds+"/",
            stairway_dir=pathlib.Path.cwd() / "stairwayplot")
        runner.ts_to_stairway(inputs, num_bootstraps=200, mask_file=mask_file)
        runner.run_theta_estimation(max_workers=threads, show_progress=True)
        runner.run_summary(output, mutation_rate=mutation_rate, generation_time=generation_time)


def ne_files(wildcards):
    return expand(output_dir + "/Results/{seeds}/stairwayplot_estimated_Ne.txt",
            seeds=seed_array, chrms=chrm_list)


rule compound_stairwayplot:
    input:
        ne_files
    output:
        output_dir + "/stairwayplot_estimated_Ne.png"
    run: plots.plot_compound_Ne_estimate(model, input, output[0])


rule plot_stairwayplot:
    input:
        f1 = ne_files
    output:
        output_dir + "/Results/stairwayplot.pdf"
    run:
        plots.plot_stairwayplot_coalrate(input.f1, output[0],
                    model=model, n_samp=num_sampled_genomes_per_replicate,
                    generation_time=generation_time, species=config["species"],
                    pop_id=population_id)

# ###############################################################################
# SMC++
# ###############################################################################


rule ts_to_smc:
    input:rules.simulation.output
    output: output_dir + "/Intermediate/{seeds}/{chrms}.trees.smc.gz"
    run: smc.write_smcpp_file(input[0], mask_file=mask_file)


rule run_smcpp:
    input:
        expand(output_dir+ "/Intermediate/{seeds}/{chrms}.trees.smc.gz", 
            chrms=chrm_list, seeds=seed_array)
    output:
        output_dir + "/Intermediate/{seeds}/trees.smc.gz.final.json"
    threads: 20
    run:
	    # need to cd into subdir because smc++ crashes otherwise
        cur = os.getcwd()
        os.chdir(f"{output_dir}/Intermediate/{wildcards.seeds}")
        inputs = expand("{chrms}.trees.smc.gz", chrms=chrm_list)
        inputs = " ".join(inputs)
        base = f"trees.smc.gz"
        # TODO get the rate here from stdpopsim
        smc.run_smcpp_estimate(inputs, base, mutation_rate=mutation_rate, ncores=threads)
	    # need to cd out of subdir for snakemake sanity
        os.chdir(cur)


rule smcpp_plot:
    input: 
        rules.run_smcpp.output
    output: 
        output_dir + "/Results/{seeds}/trees.smc.gz.final.json.csv"
    run:
        # TODO get the genetion time from std source
        smc.run_smcpp_plot(input[0], output[0], generation_time=generation_time)


def ne_files_smcpp(wildcards):
    return expand(output_dir + "/Results/{seeds}/trees.smc.gz.final.json.csv",
            seeds=seed_array, chrms=chrm_list)


rule compound_smcpp:
    input: ne_files_smcpp
    output: output_dir + "/Results/smcpp_estimated_Ne.png"
    run: plots.plot_compound_smcpp(input, output[0], model, num_sampled_genomes_per_replicate, generation_time)


# ###############################################################################
# MSMC
# ###############################################################################


rule ts_to_multihep:
    input: rules.simulation.output
    output: output_dir + "/Intermediate/{seeds}/{samps}.{chrms}.trees.multihep.txt"
    run: msmc.write_msmc_file(input[0], num_sampled_genomes_msmc, mask_file=mask_file)


rule run_msmc:
    input:
        # TODO make this NOT dependent on all simulations.
        # is there anyway to get access to wildcards.seeds from here? 
        expand(output_dir + "/Intermediate/{seeds}/{samps}.{chrms}.trees.multihep.txt",
            chrms=chrm_list, seeds=seed_array, samps=num_sampled_genomes_msmc)
    output: output_dir + "/Intermediate/{seeds}/{samps}.trees.multihep.txt.final.txt"
    threads: 8 
    run: 
        inputs = expand(output_dir + "/Intermediate/{seeds}/{samps}.{chrms}.trees.multihep.txt",
            seeds=wildcards.seeds, samps=wildcards.samps, chrms=chrm_list)
        input_file_string = " ".join(inputs)
        output_file_string = output_dir + f"/Intermediate/{wildcards.seeds}/{wildcards.samps}.trees.multihep.txt"
        msmc.run_msmc_estimate(input_file_string, output_file_string, msmc_exec,
            iterations=num_msmc_iterations, ncores=threads)


rule convert_msmc:
    input: rules.run_msmc.output
    output: output_dir + "/Results/{seeds}/{samps}.trees.multihep.txt.final.txt.csv"
    run: msmc.convert_msmc_output(input[0] ,output[0], mutation_rate=mutation_rate, generation_time=generation_time)


def ne_files_msmc(wildcards):
    return expand(output_dir + "/Results/{seeds}/{samps}.trees.multihep.txt.final.txt.csv",
            seeds=seed_array,samps=num_sampled_genomes_msmc)


rule compound_msmc:
    input: ne_files_msmc,
    output: output_dir+"/Results/msmc_estimated_Ne.png"
    run: plots.plot_compound_msmc(model, input, output[0])


# ###############################################################################
#  SMCSMC
# ###############################################################################

rule ts_to_seg:
	input: rules.simulation.output
	output: output_dir + "/Intermediate/{seeds}/{samps}.{chrms}.trees.seg"
	run: smcsmc.utils.ts_to_seg(input[0], num_sampled_genomes_smcsmc)

rule run_smcsmc:
	input:	
		expand(output_dir + "/Intermediate/{seeds}/{samps}.{chrms}.trees.seg",
        		chrms=chrm_list, seeds=seed_array, samps=num_sampled_genomes_smcsmc)
	output: 
		output_dir + "/Intermediate/{seeds}/{samps}.run/result.out"
	run: 
		inputs = expand(output_dir+"/Intermediate/{seeds}/{samps}.{chrms}.trees.seg", 
			seeds=wildcards.seeds, samps=wildcards.samps, chrms=chrm_list)
		
		input_file_string = " ".join(inputs)
		args = {	
			'EM': str(num_smcsmc_iterations),
			'Np': str(num_smcsmc_particles),	
			# Submission Parameters
			'chunks': '100',	
			'no_infer_recomb': '',
			# Other inference parameters
			'mu': str(species.genome.mean_mutation_rate),
			'N0': '14312',
			'rho': '3e-9',
			'calibrate_lag': '1.0',
			'tmax':	'3.5',
			'alpha': '0',
			'apf': '2',
			'P': '133 133016 31*1',
			'VB': '',
			'nsam':	str(wildcards.samps),		
			# This should be in the conda bin
			'smcsmcpath': os.path.expandvars('${CONDA_PREFIX}/bin/smcsmc')
		}
		args['o'] = output_dir + f"/Intermediate/{wildcards.seeds}/{wildcards.samps}.run"
		args['segs'] = input_file_string
		
		smcsmc.run_smcsmc(args)	

rule convert_smcsmc:
    input: rules.run_smcsmc.output
    output: output_dir + "/Results/{seeds}/{samps}.run/results.out.csv"
    run: smcsmc.popsim.convert_smcsmc_output(input[0], output[0], generation_time, num_smcsmc_iterations)


def ne_files_smcsmc(wildcards):
    return expand(output_dir + "/Results/{seeds}/{samps}.run/results.out.csv",
            seeds=seed_array, samps=num_sampled_genomes_smcsmc)

rule plot_by_sample:
    input: expand(output_dir + "/Results/{seeds}/{{samps}}.run/results.out.csv", seeds=seed_array)
    output: output_dir+"/Results/smcsmc_estimated_Ne_{samps}.png"
    run: 
    	plots.plot_compound_smcsmc_with_guide(input, output[0], 30, 1, nhaps ={wildcards.samps}, model = model)

rule compound_smcsmc:
    input: expand(output_dir+"/Results/smcsmc_estimated_Ne_{samps}.png", samps = num_sampled_genomes_smcsmc)



# ###############################################################################
# 
# ###############################################################################


rule all_plot:
    input:
        f1 = ne_files,
        f2 = ne_files_smcpp,
        f3 = ne_files_msmc,
	f4 = ne_files_smcsmc,
    output:
        output_dir + "/Results/all_estimated_Ne.pdf"
    run: 
        plots.plot_all_ne_estimates(input.f1, input.f2, input.f3, input.f4, output[0],
                    model=model, n_samp=num_sampled_genomes_per_replicate,
                    generation_time=generation_time, species=config["species"],
                    pop_id=population_id)


rule clean:
    shell:
        f"rm -rf stairwayplot \
            stairwayplot.tar.gz \
            {output_dir}/Intermediate \
            {output_dir}/Results \
            {output_dir}/stairwayplot \
            .genetic_map_downloaded \
            .snakemake"
